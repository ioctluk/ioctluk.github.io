<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>crypto on ioctl.uk</title><link>/tags/crypto/</link><description>Recent content in crypto on ioctl.uk</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 24 Oct 2020 23:18:58 +0100</lastBuildDate><atom:link href="/tags/crypto/index.xml" rel="self" type="application/rss+xml"/><item><title>Wireguard on OpenBSD 6.8 to 7.1</title><link>/2020/10/wireguard-on-openbsd-6.8-to-7.1/</link><pubDate>Sat, 24 Oct 2020 23:18:58 +0100</pubDate><guid>/2020/10/wireguard-on-openbsd-6.8-to-7.1/</guid><description>OpenBSD 6.8 includes WireGuard . WireGuard allows one to build VPNs. For a long time, OpenBSD has had excellent IPsec support. Unfortunately the same cannot be said of IPSec support on other platforms, and inevitably a VPN relies upon good software for all parties to VPN. WireGuard is pretty good on all platforms, making it very attractive. By pretty good, I mean: straightforward to use and well-engineered (fast, secure, code quality, crypto design, etc).</description></item><item><title>Sensible Development with a Raspberry Pi 3</title><link>/2020/05/sensible-development-with-a-raspberry-pi-3/</link><pubDate>Wed, 20 May 2020 09:12:58 +0100</pubDate><guid>/2020/05/sensible-development-with-a-raspberry-pi-3/</guid><description>The Raspberry Pi 3 is surprisingly powerful. Here&amp;rsquo;s what mine does:
File serving using Samba. Git repository hosting using gitea. Continuous testing and building using Drone. Encrypted backups of itself and other hosts using duplicity Monitoring of my network: I dump various stats to rrd then plot via a small Go web renderer. Raspberry Pi 3 has two weaknesses for this set up: storage and 100Mbps network.
My Raspberry Pi 3 only uses its SD card to boot; all storage is on a separate NAS.</description></item><item><title>Simple Encrypted, Signed Backups with Duplicity</title><link>/2020/02/simple-encrypted-signed-backups-with-duplicity/</link><pubDate>Sat, 01 Feb 2020 09:03:28 +0100</pubDate><guid>/2020/02/simple-encrypted-signed-backups-with-duplicity/</guid><description>Why use duplicityfor backups? It is a thin wrapper around common tools: gnupgfor cryptography, tar(1) for archiving, and rsyncfor file synchronisation. These are very widely used and widely available programs. They work on almost any platform. And these programs (plus your encryption key) are all you need to get to your back up if duplicity is not available. duplicity just makes it easier to create, verify, maintain and extract back ups.</description></item><item><title>GPG/PGP Email Forwarding</title><link>/2018/07/gpg/pgp-email-forwarding/</link><pubDate>Sun, 08 Jul 2018 13:39:29 +0100</pubDate><guid>/2018/07/gpg/pgp-email-forwarding/</guid><description>This page describes how to GPG encrypt and then forward all incoming mail. It should work with any modern UNIX that supports .forward. In particular, this page describes how to GPG encrypt and forward to user@example.org using an already generated GPG key.
First, import your public GPG key (note: your private key should not be copied!) and check it is imported:
$ gpg --import &amp;lt;pubkey.asc $ gpg --list-keys # note the key id: e.</description></item></channel></rss>