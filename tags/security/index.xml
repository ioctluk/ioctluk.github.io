<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>security on ioctl.uk</title><link>/tags/security/</link><description>Recent content in security on ioctl.uk</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 24 Oct 2020 23:18:58 +0100</lastBuildDate><atom:link href="/tags/security/index.xml" rel="self" type="application/rss+xml"/><item><title>Wireguard on OpenBSD 6.8 to 7.1</title><link>/2020/10/wireguard-on-openbsd-6.8-to-7.1/</link><pubDate>Sat, 24 Oct 2020 23:18:58 +0100</pubDate><guid>/2020/10/wireguard-on-openbsd-6.8-to-7.1/</guid><description>OpenBSD 6.8 includes WireGuard . WireGuard allows one to build VPNs. For a long time, OpenBSD has had excellent IPsec support. Unfortunately the same cannot be said of IPSec support on other platforms, and inevitably a VPN relies upon good software for all parties to VPN. WireGuard is pretty good on all platforms, making it very attractive. By pretty good, I mean: straightforward to use and well-engineered (fast, secure, code quality, crypto design, etc).</description></item><item><title>Sensible Development with a Raspberry Pi 3</title><link>/2020/05/sensible-development-with-a-raspberry-pi-3/</link><pubDate>Wed, 20 May 2020 09:12:58 +0100</pubDate><guid>/2020/05/sensible-development-with-a-raspberry-pi-3/</guid><description>The Raspberry Pi 3 is surprisingly powerful. Here&amp;rsquo;s what mine does:
File serving using Samba. Git repository hosting using gitea. Continuous testing and building using Drone. Encrypted backups of itself and other hosts using duplicity Monitoring of my network: I dump various stats to rrd then plot via a small Go web renderer. Raspberry Pi 3 has two weaknesses for this set up: storage and 100Mbps network.
My Raspberry Pi 3 only uses its SD card to boot; all storage is on a separate NAS.</description></item><item><title>Dead Simple Linux Sandboxes</title><link>/2020/03/dead-simple-linux-sandboxes/</link><pubDate>Fri, 13 Mar 2020 22:06:45 +0000</pubDate><guid>/2020/03/dead-simple-linux-sandboxes/</guid><description>bubblewrap is a wonderful tool for creating sandboxes as an unprivileged user. Here&amp;rsquo;s some useful sandboxes that I regularly use.
Reading Mail in Isolation #!/bin/sh exec bwrap --unshare-user --unshare-ipc --unshare-pid --unshare-uts --unshare-cgroup \ --ro-bind /bin /bin \ --ro-bind /lib /lib \ --ro-bind /lib64 /lib64 \ --ro-bind /usr/bin /usr/bin \ --ro-bind /usr/lib /usr/lib \ --ro-bind /usr/share/terminfo /usr/share/terminfo \ --ro-bind /etc/passwd /etc/passwd \ --ro-bind $HOME/.</description></item><item><title>Simple Encrypted, Signed Backups with Duplicity</title><link>/2020/02/simple-encrypted-signed-backups-with-duplicity/</link><pubDate>Sat, 01 Feb 2020 09:03:28 +0100</pubDate><guid>/2020/02/simple-encrypted-signed-backups-with-duplicity/</guid><description>Why use duplicityfor backups? It is a thin wrapper around common tools: gnupgfor cryptography, tar(1) for archiving, and rsyncfor file synchronisation. These are very widely used and widely available programs. They work on almost any platform. And these programs (plus your encryption key) are all you need to get to your back up if duplicity is not available. duplicity just makes it easier to create, verify, maintain and extract back ups.</description></item><item><title>Sandboxing irssi</title><link>/2019/03/sandboxing-irssi/</link><pubDate>Mon, 25 Mar 2019 07:07:43 +0100</pubDate><guid>/2019/03/sandboxing-irssi/</guid><description>irssiis an IRC client. Unlike most daemons, irssi runs as a normal user and so the privileges of irssi are just those of the invoking user. By sandboxing irssi, it is restricted beyond those privileges of the invoking user. For example, irssi is able to read /etc/passwd and also run other programs.
This page describes how to sandbox irssi under OpenBSD using its builtin sandboxing mechanisms pledge(2) and unveil(2) . Each restricts the capabilities of a process in different ways.</description></item><item><title>OpenBSD Hardening Tricks</title><link>/2018/11/openbsd-hardening-tricks/</link><pubDate>Sat, 10 Nov 2018 07:21:46 +0100</pubDate><guid>/2018/11/openbsd-hardening-tricks/</guid><description>OpenBSD is locked down by default. Here are a few extra steps that can be taken.
Harden malloc OpenBSD &amp;rsquo;s malloc(3) performs many checks by default. Further checks can be enabled as follows:
# Under OpenBSD 6.4 or earlier $ doas ln -s CFGU /etc/malloc.conf # Under OpenBSD 6.5 or later $ doas sysctl -w vm.malloc_conf=CFGU Accounting Accounting provides a log of all commands run, via lastcomm(1) and summarise via sa(8) .</description></item></channel></rss>